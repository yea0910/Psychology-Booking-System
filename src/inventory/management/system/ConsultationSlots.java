/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventory.management.system;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aimy
 */
public class ConsultationSlots extends javax.swing.JFrame {

    /**
     * Creates new form ConsultationSlots
     */
    private String studentID;

    public ConsultationSlots(String studentID) {
        this.studentID = studentID;
        initComponents();
        setLocationRelativeTo(null);
        loadConsultationSlots();
    }

    public static void initializeFile(String filePath) {
        File file = new File(filePath);
        if (!file.exists()) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
                writer.write("ConsultationID,LecturerID,StudentID,Date,Time,Duration,StudentFeedback,LecturerFeedback,Status,Location");
                writer.newLine();
            } catch (IOException e) {
                System.err.println("Error initializing file: " + e.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnBook = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableConsultation = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel1.setText("Consultation Slots");

        btnBook.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(255, 102, 102));
        btnClose.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        tableConsultation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Consultation ID", "Lecturer ID", "Student ID", "Date", "Time", "Duration", "Status", "Location"
            }
        ));
        tableConsultation.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tableConsultationComponentShown(evt);
            }
        });
        jScrollPane1.setViewportView(tableConsultation);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(308, 308, 308))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 882, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBook)
                        .addGap(201, 201, 201)
                        .addComponent(btnClose)
                        .addGap(284, 284, 284))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBook)
                    .addComponent(btnClose))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadConsultationSlots() {
        try (BufferedReader br = new BufferedReader(new FileReader("consultations.txt"))) {
            DefaultTableModel model = (DefaultTableModel) tableConsultation.getModel();
            model.setRowCount(0); // Clear the table
            String line;
            br.readLine(); // Skip header row

            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length != 10) {
                    System.err.println("Skipping invalid row: " + line);
                    continue; // Ensure the row has all columns
                }

                // Parse fields
                String consultationID = data[0];
                String lecturerID = data[1];
                String studentID = data[2];
                String date = data[3];
                String time = data[4];
                String duration = data[5];
                String status = data[8] != null ? data[8].trim() : "";
                String location = data[9];

                // Combine date and time for comparison
                try {
                    LocalDateTime consultationDateTime = LocalDateTime.parse(
                            date + "T" + time,
                            DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm")
                    );
                } catch (DateTimeParseException e) {
                    System.err.println("Invalid date/time: " + date + "T" + time);
                    continue; // Skip rows with invalid date or time
                }

                // Filter out expired or past slots
                if (status.equalsIgnoreCase("Booked") || status.equalsIgnoreCase("Expired") || status.equalsIgnoreCase("Past")) {
                    continue;
                }

                // Only add rows that match the student's ID or are available
                if (status.equalsIgnoreCase("Available")) {
                    model.addRow(new Object[]{
                        consultationID, lecturerID,
                        studentID.isEmpty() ? "" : studentID,
                        date, time, duration,
                        status.isEmpty() ? "" : status,
                        location
                    });
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading consultation slots: " + e.getMessage());
        } catch (DateTimeParseException e) {
            System.err.println("Invalid date or time format in consultations.txt");
        }
    }

    private void loadUserData() {
        DefaultTableModel model = (DefaultTableModel) tableConsultation.getModel();
        model.setRowCount(0); // Clear existing data

        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd"); // Assuming the date format is yyyy-MM-dd

        try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
            String line;

            // Skip the header line
            if ((line = reader.readLine()) != null) {
            }

            LocalDate currentDate = LocalDate.now(); // Get current date

            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(",");

                // Parse the consultation date
                LocalDate consultationDate = LocalDate.parse(userData[3], dateFormatter); // Assuming the date is in column 3 (index 3)

                // Check if the consultation is not expired
                if (!consultationDate.isBefore(currentDate)) {
                    // Add only the necessary columns (excluding StudentFeedback and LecturerFeedback)
                    String[] rowData = new String[8]; // Only 8 columns (excluding feedback)
                    rowData[0] = userData[0]; // ConsultationID
                    rowData[1] = userData[1]; // LecturerID
                    rowData[2] = userData[2]; // StudentID
                    rowData[3] = userData[3]; // Date
                    rowData[4] = userData[4]; // Time
                    rowData[5] = userData[5]; // Duration
                    rowData[6] = userData[8]; // Status
                    rowData[7] = userData[9]; // Location

                    model.addRow(rowData);
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading user data: " + ex.getMessage());
        }
    }


    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableConsultation.getModel();

        // Get the selected row
        int selectedRow = tableConsultation.getSelectedRow();

        if (selectedRow != -1) {
            String status = model.getValueAt(selectedRow, 6).toString();

            // Check if the status is not already "Booked"
            if (!status.equalsIgnoreCase("Booked")) {
                String consultationID = (String) model.getValueAt(selectedRow, 0); // Consultation ID
                String studentID = this.studentID; // Logged-in student ID

                // Update the table model
                model.setValueAt("Booked", selectedRow, 6);
                model.setValueAt(studentID, selectedRow, 2);

                // Save the changes back to the file
                saveDataToFile();

                // Reload consultation slots to remove the booked slot from the table
                loadConsultationSlots();

                JOptionPane.showMessageDialog(this, "Consultation slot booked successfully!");
                
                setVisible(false);
                new ViewAppointments(studentID).setVisible(true);
            } else {
                // If the slot is already booked
                JOptionPane.showMessageDialog(this, "This slot is not available for booking.");
            }
        } else {
            // If no row is selected
            JOptionPane.showMessageDialog(this, "Please select a consultation slot to book.");
        }
    }

    private void saveDataToFile() {
        try {
            List<String> lines = new ArrayList<>();
            try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    lines.add(line);
                }
            }

            // Write updated data to the file
            DefaultTableModel model = (DefaultTableModel) tableConsultation.getModel();

            // Write header
            lines.set(0, "ConsultationID,LecturerID,StudentID,Date,Time,Duration,StudentFeedback,LecturerFeedback,Status,Location");

            // Update rows in the file
            for (int i = 0; i < model.getRowCount(); i++) {
                String consultationID = model.getValueAt(i, 0).toString();
                String updatedLine = consultationID + "," // ConsultationID
                        + model.getValueAt(i, 1) + "," // LecturerID
                        + model.getValueAt(i, 2) + "," // StudentID
                        + model.getValueAt(i, 3) + "," // Date
                        + model.getValueAt(i, 4) + "," // Time
                        + model.getValueAt(i, 5) + "," // Duration
                        + "," // Empty StudentFeedback
                        + "," // Empty LecturerFeedback
                        + model.getValueAt(i, 6) + "," // Status
                        + model.getValueAt(i, 7);        // Location

                // Replace the matching line or append a new one
                boolean found = false;
                for (int j = 1; j < lines.size(); j++) {  // Start from line 1 to skip header
                    if (lines.get(j).startsWith(consultationID + ",")) {
                        lines.set(j, updatedLine);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    lines.add(updatedLine);
                }
            }

            // Write all updated data back to the file
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultations.txt"))) {
                for (String line : lines) {
                    writer.write(line);
                    writer.newLine();
                }
            }

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving file: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnBookActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void tableConsultationComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tableConsultationComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_tableConsultationComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        String filePath = "consultations.txt";
        initializeFile(filePath);


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new ConsultationSlots("").setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableConsultation;
    // End of variables declaration//GEN-END:variables
}
