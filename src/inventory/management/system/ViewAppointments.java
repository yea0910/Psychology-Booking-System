/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventory.management.system;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aimy
 */
public class ViewAppointments extends javax.swing.JFrame {

    private String studentID;

    /**
     * Creates new form PPE_items
     */
    public ViewAppointments(String studentID) {
        initComponents();
        this.studentID = studentID;
        setLocationRelativeTo(null);
        loadAppointments();
    }

    private void loadAppointments() {
        DefaultTableModel model = (DefaultTableModel) tableAppointments.getModel();
        model.setRowCount(0); // Clear existing data

        try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
            String line = reader.readLine(); // Skip the header
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Skip expired slots
                if ("Expired".equalsIgnoreCase(data[8])) {
                    continue; // Move to the next line
                }

                // Only add slots that match the logged-in student
                if (this.studentID.equals(data[2])) {
                    model.addRow(new Object[]{
                        data[0], data[1], data[2], data[3], data[4], data[5],
                        data[6], data[7], data[8], data[9]
                    });
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading appointments: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnreschedule = new javax.swing.JButton();
        btnFeedback = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAppointments = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setText("Cancel Appointment");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnreschedule.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnreschedule.setText("Reschedule");
        btnreschedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrescheduleActionPerformed(evt);
            }
        });

        btnFeedback.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFeedback.setText("Leave Feedback");
        btnFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFeedbackActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(255, 102, 102));
        btnClose.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        jLabel1.setText("Appointments");

        tableAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Consultation ID", "Lecturer ID", "Student ID", "Date", "Time", "Duration", "Student Feedback", "Lecturer Feedback", "Status", "Location"
            }
        ));
        jScrollPane1.setViewportView(tableAppointments);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnClose)
                        .addGap(432, 432, 432))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(338, 338, 338))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(btnCancel)
                        .addGap(102, 102, 102)
                        .addComponent(btnreschedule)
                        .addGap(101, 101, 101)
                        .addComponent(btnFeedback)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnreschedule)
                    .addComponent(btnFeedback))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addGap(39, 39, 39))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadUserData() {
        DefaultTableModel model = (DefaultTableModel) tableAppointments.getModel();
        model.setRowCount(0); // Clear existing data

        try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
            String line;

            if ((line = reader.readLine()) != null) {

            }

            while ((line = reader.readLine()) != null) {
                String[] userData = line.split(",");

                if (userData[2].equals(studentID)) {
                    model.addRow(userData);
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading user data: " + ex.getMessage());
        }
    }

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        loadUserData();
    }//GEN-LAST:event_formComponentShown

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableAppointments.getSelectedRow();

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) tableAppointments.getModel();
            String consultationID = (String) model.getValueAt(selectedRow, 0); // Consultation ID
            String bookedStudentID = (String) model.getValueAt(selectedRow, 2); // Student ID
            String status = (String) model.getValueAt(selectedRow, 8); // Status

            // Check if the consultation is booked and belongs to the logged-in student
            if ("Booked".equalsIgnoreCase(status) && studentID.equals(bookedStudentID)) {
                // Show confirmation dialog
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to cancel this consultation?",
                        "Confirm Cancellation",
                        JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    model.setValueAt("", selectedRow, 2); // Clear Student ID
                    model.setValueAt("Available", selectedRow, 8); // Update Status to "Available"

                    try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
                        List<String> lines = new ArrayList<>();
                        String line;

                        while ((line = reader.readLine()) != null) {
                            String[] data = line.split(",");
                            if (data[0].equals(consultationID)) {
                                // Update the line for the canceled consultation
                                data[2] = ""; // Clear Student ID
                                data[8] = "Available"; // Update Status
                                line = String.join(",", data);
                            }
                            lines.add(line); // Add (updated or unchanged) line to the list
                        }

                        // Rewrite the file with updated lines
                        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultations.txt"))) {
                            for (String updatedLine : lines) {
                                writer.write(updatedLine);
                                writer.newLine();
                            }
                        }

                        JOptionPane.showMessageDialog(this, "Consultation slot cancelled successfully!");
                        loadAppointments(); // Reload appointments after modifying the file

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error updating file: " + ex.getMessage());
                    }
                }
            } else if (!studentID.equals(bookedStudentID)) {
                JOptionPane.showMessageDialog(this, "You can only cancel your own bookings.");
            } else {
                JOptionPane.showMessageDialog(this, "This slot is not booked and cannot be cancelled.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a consultation slot to cancel.");
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnrescheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrescheduleActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableAppointments.getSelectedRow();

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) tableAppointments.getModel();
            String consultationID = (String) model.getValueAt(selectedRow, 0); // Consultation ID
            String bookedStudentID = (String) model.getValueAt(selectedRow, 2); // Student ID
            String status = (String) model.getValueAt(selectedRow, 8); // Status

            // Check if the consultation is booked by the logged-in student
            if ("Booked".equalsIgnoreCase(status) && studentID.equals(bookedStudentID)) {
                // Ask for confirmation to reschedule (cancel the current booking)
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Are you sure you want to reschedule (cancel) this consultation?",
                        "Confirm Reschedule",
                        JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Set the selected slot to "Available" and clear the student ID
                    model.setValueAt("", selectedRow, 2); // Clear Student ID
                    model.setValueAt("Available", selectedRow, 8); // Update Status to "Available"

                    try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
                        List<String> lines = new ArrayList<>();
                        String line;

                        while ((line = reader.readLine()) != null) {
                            String[] data = line.split(",");
                            if (data[0].equals(consultationID)) {
                                // Update the line for the rescheduled consultation (cancel it)
                                data[2] = ""; // Clear Student ID
                                data[8] = "Available"; // Set Status to "Available"
                                line = String.join(",", data); // Rebuild the line
                            }
                            lines.add(line); // Add updated or unchanged line
                        }

                        // Rewrite the file with updated lines
                        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultations.txt"))) {
                            for (String updatedLine : lines) {
                                writer.write(updatedLine);
                                writer.newLine();
                            }
                        }

                        // Inform the user that the consultation was rescheduled (cancelled) successfully
                        JOptionPane.showMessageDialog(this, "Consultation rescheduled successfully!");

                        // Redirect to ConsultationSlots page
                        setVisible(false);
                        new ConsultationSlots(this.studentID).setVisible(true);

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error updating file: " + ex.getMessage());
                    }
                }
            } else if (!studentID.equals(bookedStudentID)) {
                JOptionPane.showMessageDialog(this, "You can only reschedule your own bookings.");
            } else {
                JOptionPane.showMessageDialog(this, "This slot is not booked and cannot be rescheduled.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a consultation slot to reschedule.");
        }
    }//GEN-LAST:event_btnrescheduleActionPerformed

    private void btnFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFeedbackActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableAppointments.getSelectedRow();

        if (selectedRow >= 0) {
            DefaultTableModel model = (DefaultTableModel) tableAppointments.getModel();
            String status = (String) model.getValueAt(selectedRow, 8); // Column index for "Status"

            if ("Past".equalsIgnoreCase(status)) {
                String consultationID = (String) model.getValueAt(selectedRow, 0); // Consultation ID
                String feedback = JOptionPane.showInputDialog(this, "Enter your feedback for this consultation:");

                if (feedback != null && !feedback.trim().isEmpty()) {
                    // Save the feedback to the file
                    try (BufferedReader reader = new BufferedReader(new FileReader("consultations.txt"))) {
                        List<String> updatedLines = new ArrayList<>();
                        String line;

                        while ((line = reader.readLine()) != null) {
                            String[] data = line.split(",");
                            if (data[0].equals(consultationID)) {
                                data[6] = feedback; // Update StudentFeedback column
                                line = String.join(",", data);
                            }
                            updatedLines.add(line);
                        }

                        // Rewrite the file with updated feedback
                        try (BufferedWriter writer = new BufferedWriter(new FileWriter("consultations.txt"))) {
                            for (String updatedLine : updatedLines) {
                                writer.write(updatedLine);
                                writer.newLine();
                            }
                        }

                        // Refresh table
                        loadUserData();
                        JOptionPane.showMessageDialog(this, "Feedback submitted successfully!");
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Error saving feedback: " + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Feedback cannot be empty.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "You can only leave feedback for past consultations.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an appointment to leave feedback.");
        }
    }//GEN-LAST:event_btnFeedbackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAppointments("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnFeedback;
    private javax.swing.JButton btnreschedule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAppointments;
    // End of variables declaration//GEN-END:variables
}
