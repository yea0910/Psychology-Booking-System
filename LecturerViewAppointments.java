/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package inventory.management.system;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class LecturerViewAppointments extends javax.swing.JFrame {
    private String lecturerID;
    /**
     * Creates new form LecturerViewAppointments
     */
    public LecturerViewAppointments(String lecturerID) {
        this.lecturerID = lecturerID;
        initComponents();
        insertAppointmentData();
    }
    
    private void insertAppointmentData() {
    try (BufferedReader br = new BufferedReader(new FileReader("consultations.txt"))) {
        // Access the DefaultTableModel of the JTable
        DefaultTableModel model = (DefaultTableModel) viewAppointmentTable.getModel();
        
        // Clear existing rows in the table
        model.setRowCount(0);

        // Skip the header line in the file
        String line = br.readLine(); // Assumes the first line is the header
        
        // Read the remaining lines of the file
        // while ((line = br.readLine()) != null) {
        while ((line = br.readLine()) != null) {
            // Split the line into fields using comma as a delimiter
            String[] rowData = line.split(",");

            // Ensure the row has the correct number of columns (10 in your case)
            if (rowData.length != 10) {
                System.err.println("Invalid row: " + line);
                continue; // Skip invalid rows
            }

            // Extract fields from the row
            String consultationID = rowData[0].trim();
            String fileLecturerID = rowData[1].trim();
            String studentID = rowData[2].trim();
            String date = rowData[3].trim();
            String time = rowData[4].trim();
            String duration = rowData[5].trim();
            String studentFeedback = rowData[6].trim();
            String lecturerFeedback = rowData[7].trim();
            String status = rowData[8].trim();
            String location = rowData[9].trim();

                // Skip rows that do not belong to the current lecturer
                if (!fileLecturerID.equalsIgnoreCase(this.lecturerID)) {
                    continue;
                }
            
                // Add the row to the table
                model.addRow(new Object[] {
                    consultationID, fileLecturerID, 
                    studentID.isEmpty() ? "" : studentID,
                    date, time, duration, studentFeedback, lecturerFeedback,
                    status.isEmpty() ? "Available" : status,
                    location
                });
        }
            
        } catch (IOException e) {
            // Show error message if there's an issue with the file
            JOptionPane.showMessageDialog(this, "Error reading consultation slots: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ViewTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewAppointmentTable = new javax.swing.JTable();
        closeButton = new javax.swing.JButton();
        addFeedbackButton = new javax.swing.JButton();
        approvalButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        ViewTitle.setFont(new java.awt.Font("Franklin Gothic Heavy", 1, 36)); // NOI18N
        ViewTitle.setText("View Appointments");

        viewAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Consultation ID", "Lecturer ID", "Student ID", "Date", "Time", "Duration", "Student Feedback", "Lecturer Feedback", "Status", "Location"
            }
        ));
        jScrollPane1.setViewportView(viewAppointmentTable);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        addFeedbackButton.setText("Add Feedback");
        addFeedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFeedbackButtonActionPerformed(evt);
            }
        });

        approvalButton.setText("Approval");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(approvalButton)
                .addGap(42, 42, 42)
                .addComponent(addFeedbackButton)
                .addGap(51, 51, 51)
                .addComponent(closeButton)
                .addGap(348, 348, 348))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(ViewTitle))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ViewTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(addFeedbackButton)
                    .addComponent(approvalButton))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void addFeedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFeedbackButtonActionPerformed
        // TODO add your handling code here:
         int selectedRow = viewAppointmentTable.getSelectedRow();
        if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an appointment to leave feedback.", "No Row Selected", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) viewAppointmentTable.getModel();
    String status = (String) model.getValueAt(selectedRow, 8);  // Column for "Status"

    if (!"Past".equalsIgnoreCase(status)) {
        JOptionPane.showMessageDialog(this, "You can only leave feedback for past consultations.");
        return;
    }

    String consultationID = (String) model.getValueAt(selectedRow, 0);  // Column for "Consultation ID"
    String feedback = JOptionPane.showInputDialog(this, "Enter your feedback for this consultation:");

    if (feedback == null || feedback.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Feedback cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try (RandomAccessFile file = new RandomAccessFile("consultations.txt", "rw")) {
        String line;
        long filePointer = 0;

        while ((line = file.readLine()) != null) {
            if (line.startsWith(consultationID + ",")) {
                // Replace Student Feedback in the correct column (index 6)
                int startOfFeedback = line.indexOf(",", line.indexOf(",", line.indexOf(",", 
                                            line.indexOf(",", line.indexOf(",", 
                                            line.indexOf(",", line.indexOf(",") + 1) + 1) + 1) + 1) + 1) + 1);
                int endOfFeedback = line.indexOf(",", startOfFeedback + 1);

                // Build updated line
                String updatedLine = line.substring(0, startOfFeedback + 1) + feedback + line.substring(endOfFeedback);

                // Overwrite the matching line
                file.seek(filePointer);  // Go back to the start of the matching line
                file.writeBytes(updatedLine + System.lineSeparator());
                break;
            }
            filePointer = file.getFilePointer();  // Save current file pointer
        }

        // Update JTable and display success message
        model.setValueAt(feedback, selectedRow, 7);  // Update JTable "Student Feedback"
        JOptionPane.showMessageDialog(this, "Feedback submitted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error saving feedback: " + ex.getMessage(), "File Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_addFeedbackButtonActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LecturerViewAppointments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LecturerViewAppointments("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ViewTitle;
    private javax.swing.JButton addFeedbackButton;
    private javax.swing.JButton approvalButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable viewAppointmentTable;
    // End of variables declaration//GEN-END:variables
}
